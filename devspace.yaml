version: v2beta1
# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
  OPENAI_API_KEY: 
    question: OPENAI_API_KEY to be used in jupyter notebook
    default: ""
  JUPYTER_NOTEBOOK_IMAGE: jupyter-notebook

pipelines:
  # override the default `devspace deploy`\
  deploy: |-
    build_images --all
    create_deployments trow jupyter-notebook
  # override the default `devspace dev`
  dev: |-
    start_dev --all
  # `devspace run-pipeline stop-dev` to stop all dev containers
  stop-dev: |-
    stop_dev --all

pullSecrets:
  trow-pullsecret:
    registry: trow.${DEVSPACE_NAMESPACE}.svc.cluster.local:8000
    username: user
    password: password

images:
  jupyter-notebook:
    image: trow.${DEVSPACE_NAMESPACE}.svc.cluster.local:8000/${JUPYTER_NOTEBOOK_IMAGE}
    custom:
      command: |-
        docker build \
        -t ${runtime.images.jupyter-notebook.image}:${runtime.images.jupyter-notebook.tag} \
        -f apps/jupyter-notebook/Dockerfile .
      onChange:
        - apps/jupyter-notebook
deployments:
  trow:
    helm:
      chart:
        name: trow
        repo: https://trow.io
  # optional
  redis:
    helm:
      chart:
        name: redis
        repo: https://charts.bitnami.com/bitnami
      values:
        auth:
          password: redis
        architecture: standalone
        master:
          persistence:
            enabled: false
  # optional
  nginx-ingess:
    helm:
      chart:
        name: nginx-ingress-controller
        repo: https://charts.bitnami.com/bitnami
      values:
        service:
          type: ClusterIP
  jupyter-notebook:
    helm:
      values:
        containers:
        - image: ${runtime.images.jupyter-notebook}
          imagePullPolicy: IfNotPresent
          env:
          - name: OPENAI_API_KEY
            value: "${OPENAI_API_KEY}"
        service:
          ports:
          - port: 8888
  # optional
  ingress-config:
    kubectl:
      inlineManifest: |-
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ingress
          namespace: ${DEVSPACE_NAMESPACE}
          annotations:
            nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
            kubernetes.io/ingress.class: "nginx"
        spec:
          rules:
          - http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: jupyter-notebook
                    port:
                      number: 8888
dev:
  jupyter-notebook:
    # Search for the container that runs this image
    labelSelector:
      app.kubernetes.io/component: jupyter-notebook
    namespace: ${DEVSPACE_NAMESPACE}
    sync:
      # Map the local path "./notebooks" (= local working directory /notebooks) to the container path "/home/jovyan/work"
      - path: ./notebooks:/home/jovyan/work
        initialSync: preferLocal
        uploadExcludeFile: ../.dockerignore
        downloadExcludeFile: ../.gitignore
        printLogs: true
    ports:
    - port: "8888:8888"   # Map localhost port 8888 to container port 8888
    open:
    - url: http://localhost:8888/lab
